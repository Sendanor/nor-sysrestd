#!/usr/bin/env node
/* nor-restd -- The Command Line Interface */

var util = require('util');
var argv = require('optimist').argv;
var config = require('../src/config.js')();

var daemon_pid = process.env.PIDFILE || require('path').join(config.get_home_dir(), '/.nor-restd.pid');

var daemon = require("daemonize2").setup({
    main: __dirname + "/../src/app.js",
    name: "nor-restd",
    pidfile: daemon_pid,
    silent: true
});

/** Handle argument config */
function arg_config() {

	function arg_config_save() {
		config.save();
		console.log('Config saved successfully.');
	}

	/** Iterate through an object and call `fun` for each plain variable -- which is not a function, an array nor object */
	function iterate_obj(obj, fun, prefix) {
		prefix = prefix || '';
		Object.keys(obj).forEach(function(key) {
			var value = obj[key];
			if(typeof value === 'function') {
				return;
			} else if(typeof value === 'object') {
				iterate_obj(value, fun, prefix + key + '.' );
			} else {
				fun(prefix + key, value, obj, key);
			}
		});
	}

	/** Returns an object by keyword which can be 'foo.bar' for `obj.foo.bar`. */
	function fetch_obj(obj, key) {
		
		var path = [];

		function do_itr(o, keys, parent, child_key) {
			var k = keys.shift();
			if(!k) {
				return {'path': path.join('.'), 'value':o, 'parent':parent, 'child_key':child_key};
			}

			path.push(k);

			var v = o[k];
			if(typeof v === 'function') {
				return {'path': path.join('.'), 'value':null, 'parent':o, 'child_key':k };
			} else if(typeof v === 'object') {
				return do_itr(v, keys, o, k);
			} else {
				return {'path': path.join('.'), 'value':v, 'parent':o, 'child_key':k};
			}
		}

		return do_itr(obj, key.split('.'), {}, '');
	}

	function arg_config_list() {
		iterate_obj(config, function(key, value) {
			console.log( key + ' = ' + util.inspect(value) );
		});
	}

	function arg_config_get() {
		var key = argv._.shift();
		var res = fetch_obj(config, key);
		if(res.path === key) {
			console.log( util.inspect( res.value ) );
		} else {
			console.error( "Not found: " + key );
			return 1;
		}
	}

	function arg_config_set() {
		var key = argv._.shift();
		var value = argv._.shift();

		var res = fetch_obj(config, key);
		if(res.path === key) {
			res.parent[res.child_key] = value;
			console.log( 'Set ' + key + ' from ' + util.inspect(res.value) + ' to ' + util.inspect(value) );
			config.save();
		} else {
			console.error( "Not found: " + key );
			return 1;
		}
	}

	function arg_config_delete() {
		var key = argv._.shift();
		var res = fetch_obj(config, key);
		if(res.path === key) {
			delete res.parent[res.child_key];
			console.log( 'Deleted ' + key );
			config.save();
		} else {
			console.error( "Not found: " + key );
			return 1;
		}
	}

	function arg_config_help() {
		console.error([
			'USAGE: nor-restd [OPT(s)] config ACTION [PARAM(s)]',
			'where ACTION is one of:',
			'  list           list configurations',
			'  get KEY        get by keyword',
			'  set KEY VALUE  set value by keyword',
			'  delete KEY     delete by keyword',
			'  save           save config'
		].join('\n'));
		return 1;
	}

	var action = argv._.shift();

	if(action === 'list') {
		return arg_config_list();
	} else if(action === 'save') {
		return arg_config_save();
	} else if(action === 'get') {
		return arg_config_get();
	} else if(action === 'set') {
		return arg_config_set();
	} else if(action === 'delete') {
		return arg_config_delete();
	} else {
		return arg_config_help();
	}
	
}

/** */
function arg_start() {
	daemon.start().once("error", function(error) {
		console.error("Error: " + error);
		process.exit(1);
	}).once("started", function() {
		process.exit();
	});
}

/** */
function arg_stop() {
	daemon.stop();
}

/** */
function arg_restart() {
}

/** */
function arg_reload() {

}

/** */
function arg_force_reload() {
}

/** */
function arg_status() {
	var pid = daemon.status();
	if(pid === 0) {
		console.log("Not running.");
		return 1;
	} else {
		console.log("Running with pid " + pid);
	}
}

/** Handle help argument */
function arg_help() {
	console.error([
		'USAGE: nor-restd [OPT(s)] ACTION [PARAM(s)]',
		'where ACTION is one of:',
		'  help          print this help',
		'  config        edit config',
		'  start         start daemon',
		'  stop          stop daemon'
		'  restart       restart daemon'
		'  reload        reload daemon'
		'  force-reload  force reload daemon'
		'  status        get daemon status'
	].join('\n'));
	return 1;
}

// The main code
var ret;
var action = argv._.shift();
if(action === 'config') {
	ret = arg_config();
} else if(action === 'start') {
	ret = arg_start();
} else if(action === 'stop') {
	ret = arg_stop();
} else if(action === 'restart') {
	ret = arg_restart();
} else if(action === 'reload') {
	ret = arg_reload();
} else if(action === 'force-reload') {
	ret = arg_force_reload();
} else if(action === 'status') {
	ret = arg_status();
} else {
	ret = arg_help();
}
if(ret === undefined) {
	ret = 0;
}
process.exit(ret);

/* EOF */
